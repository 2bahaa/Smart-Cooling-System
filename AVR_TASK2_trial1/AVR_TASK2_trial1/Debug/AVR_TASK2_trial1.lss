
AVR_TASK2_trial1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00000cbe  00000d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cbe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f33  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000949  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000709  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00002e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ba  00000000  00000000  000033f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000039ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_1>
   8:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_2>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 34       	cpi	r26, 0x4C	; 76
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 04 01 	call	0x208	; 0x208 <main>
  8e:	0c 94 5d 06 	jmp	0xcba	; 0xcba <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ADC_conf>:
{
	// Set the reference voltage to AVcc (5V)
	//ADMUX |= (1 << REFS0);

	// Set the ADC pre-scale to 128 for 16 MHz clock
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	80 83       	st	Z, r24

	// Enable the ADC
	ADCSRA |= (1 << ADEN);
  a0:	80 81       	ld	r24, Z
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <ADC_Read>:
}

// Function to read the ADC value
uint16_t ADC_Read(uint16_t channel)
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);                                    // Select the corresponding channel
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	90 81       	ld	r25, Z
  ae:	90 7f       	andi	r25, 0xF0	; 240
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	89 2b       	or	r24, r25
  b4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);                                                        // Start the conversion
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));                                                // Wait for the conversion to finish
  c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c4:	86 fd       	sbrc	r24, 6
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <ADC_Read+0x18>
	return ADC;
  c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d0:	08 95       	ret

000000d2 <LCD_cmd>:
	
}

void LCD_cmd(unsigned char cmd)
{
	PORTD=(PORTD & 0X0F)|(cmd & 0xF0);
  d2:	9b b1       	in	r25, 0x0b	; 11
  d4:	9f 70       	andi	r25, 0x0F	; 15
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	92 2b       	or	r25, r18
  dc:	9b b9       	out	0x0b, r25	; 11
	Clear_Bit(LCD_Ctrl_Out,RS);
  de:	9b b1       	in	r25, 0x0b	; 11
  e0:	9d 7f       	andi	r25, 0xFD	; 253
  e2:	9b b9       	out	0x0b, r25	; 11
	Set_Bit(LCD_Ctrl_Out,E);
  e4:	9b b1       	in	r25, 0x0b	; 11
  e6:	91 60       	ori	r25, 0x01	; 1
  e8:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	00 00       	nop
	_delay_us(1);
	Clear_Bit(LCD_Ctrl_Out,E);
  ec:	9b b1       	in	r25, 0x0b	; 11
  ee:	9e 7f       	andi	r25, 0xFE	; 254
  f0:	9b b9       	out	0x0b, r25	; 11
  f2:	36 e0       	ldi	r19, 0x06	; 6
  f4:	3a 95       	dec	r19
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_cmd+0x22>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_cmd+0x28>
	_delay_us(20);
	PORTD=(PORTD & 0X0F)|(cmd<<4);
  fa:	2b b1       	in	r18, 0x0b	; 11
  fc:	30 e1       	ldi	r19, 0x10	; 16
  fe:	83 9f       	mul	r24, r19
 100:	c0 01       	movw	r24, r0
 102:	11 24       	eor	r1, r1
 104:	92 2f       	mov	r25, r18
 106:	9f 70       	andi	r25, 0x0F	; 15
 108:	89 2b       	or	r24, r25
 10a:	8b b9       	out	0x0b, r24	; 11
	Set_Bit(LCD_Ctrl_Out,E);
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8b b9       	out	0x0b, r24	; 11
 112:	00 00       	nop
	_delay_us(1);
	Clear_Bit(LCD_Ctrl_Out,E);
 114:	8b b1       	in	r24, 0x0b	; 11
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	83 ef       	ldi	r24, 0xF3	; 243
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_cmd+0x4c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_cmd+0x52>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <LCD_Init>:
#include <avr/io.h>
#include <avr/delay.h>

void LCD_Init()
{
	DDRD=0XFF;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	8a b9       	out	0x0a, r24	; 10
	LCD_cmd(0x02);
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x28);
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x0C);
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x06);
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	LCD_cmd(0x01);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
 14a:	83 ef       	ldi	r24, 0xF3	; 243
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Init+0x26>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_Init+0x2c>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <LCD_write>:
}

void LCD_write(unsigned char data )
{
	
	PORTD=(PORTD & 0X0F)|(data & 0xF0);
 158:	9b b1       	in	r25, 0x0b	; 11
 15a:	9f 70       	andi	r25, 0x0F	; 15
 15c:	28 2f       	mov	r18, r24
 15e:	20 7f       	andi	r18, 0xF0	; 240
 160:	92 2b       	or	r25, r18
 162:	9b b9       	out	0x0b, r25	; 11
	Set_Bit(LCD_Ctrl_Out,RS);
 164:	9b b1       	in	r25, 0x0b	; 11
 166:	92 60       	ori	r25, 0x02	; 2
 168:	9b b9       	out	0x0b, r25	; 11
	Set_Bit(LCD_Ctrl_Out,E);
 16a:	9b b1       	in	r25, 0x0b	; 11
 16c:	91 60       	ori	r25, 0x01	; 1
 16e:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	00 00       	nop
	_delay_us(1);
	Clear_Bit(LCD_Ctrl_Out,E);
 172:	9b b1       	in	r25, 0x0b	; 11
 174:	9e 7f       	andi	r25, 0xFE	; 254
 176:	9b b9       	out	0x0b, r25	; 11
 178:	32 e4       	ldi	r19, 0x42	; 66
 17a:	3a 95       	dec	r19
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_write+0x22>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_write+0x28>
	_delay_us(200);
	PORTD=(PORTD & 0X0F)|(data<<4);
 180:	2b b1       	in	r18, 0x0b	; 11
 182:	30 e1       	ldi	r19, 0x10	; 16
 184:	83 9f       	mul	r24, r19
 186:	c0 01       	movw	r24, r0
 188:	11 24       	eor	r1, r1
 18a:	92 2f       	mov	r25, r18
 18c:	9f 70       	andi	r25, 0x0F	; 15
 18e:	89 2b       	or	r24, r25
 190:	8b b9       	out	0x0b, r24	; 11
	Set_Bit(LCD_Ctrl_Out,E);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	81 60       	ori	r24, 0x01	; 1
 196:	8b b9       	out	0x0b, r24	; 11
 198:	00 00       	nop
	_delay_us(1);
	Clear_Bit(LCD_Ctrl_Out,E);
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	83 ef       	ldi	r24, 0xF3	; 243
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_write+0x4c>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_write+0x52>
 1aa:	00 00       	nop
 1ac:	08 95       	ret

000001ae <write_string>:
	_delay_ms(2);
}

void write_string(char *str)
{
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <write_string+0x16>
	{
		LCD_write(str[i]);
 1be:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_write>
}

void write_string(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 1c2:	21 96       	adiw	r28, 0x01	; 1
 1c4:	f8 01       	movw	r30, r16
 1c6:	ec 0f       	add	r30, r28
 1c8:	fd 1f       	adc	r31, r29
 1ca:	80 81       	ld	r24, Z
 1cc:	81 11       	cpse	r24, r1
 1ce:	f7 cf       	rjmp	.-18     	; 0x1be <write_string+0x10>
	{
		LCD_write(str[i]);
	}
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <LCD_gotoxy>:

void LCD_gotoxy(unsigned char x,unsigned char y)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	d8 2f       	mov	r29, r24
 1e0:	c6 2f       	mov	r28, r22
	if(y==0)
 1e2:	61 11       	cpse	r22, r1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <LCD_gotoxy+0x14>
	{
		LCD_cmd(0x80+x);
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	8d 0f       	add	r24, r29
 1ea:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	}
	if(y==1)
 1ee:	c1 30       	cpi	r28, 0x01	; 1
 1f0:	21 f4       	brne	.+8      	; 0x1fa <LCD_gotoxy+0x20>
	{
		LCD_cmd(0XC0+x);
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	8d 0f       	add	r24, r29
 1f6:	0e 94 69 00 	call	0xd2	; 0xd2 <LCD_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_gotoxy+0x22>
 200:	00 00       	nop
	}
	_delay_us(10);
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <main>:
#define channel 2                //setting channel of ADC 
#include "TIMER.h"
#include <avr/interrupt.h>
int TEMP_THRESHOLD = 30;     //Default Threshold
int main(void)
{   
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	a4 97       	sbiw	r28, 0x24	; 36
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
	DDRB &=~ (1<<DDD2);
 21c:	84 b1       	in	r24, 0x04	; 4
 21e:	8b 7f       	andi	r24, 0xFB	; 251
 220:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTD2);
 222:	85 b1       	in	r24, 0x05	; 5
 224:	84 60       	ori	r24, 0x04	; 4
 226:	85 b9       	out	0x05, r24	; 5
	EICRA|=(1<<ISC00);
 228:	e9 e6       	ldi	r30, 0x69	; 105
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
	EIMSK|=(1<<INT0);
 232:	8d b3       	in	r24, 0x1d	; 29
 234:	81 60       	ori	r24, 0x01	; 1
 236:	8d bb       	out	0x1d, r24	; 29
	DDRB &=~ (1<<DDD3);
 238:	84 b1       	in	r24, 0x04	; 4
 23a:	87 7f       	andi	r24, 0xF7	; 247
 23c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTD3);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	88 60       	ori	r24, 0x08	; 8
 242:	85 b9       	out	0x05, r24	; 5
	EICRA|=(1<<ISC10);
 244:	80 81       	ld	r24, Z
 246:	84 60       	ori	r24, 0x04	; 4
 248:	80 83       	st	Z, r24
	EIMSK|=(1<<INT1);
 24a:	8d b3       	in	r24, 0x1d	; 29
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	8d bb       	out	0x1d, r24	; 29
	sei(); 
 250:	78 94       	sei
	DDRB |= (1<<DDB0);             //PB0 as Output 
 252:	84 b1       	in	r24, 0x04	; 4
 254:	81 60       	ori	r24, 0x01	; 1
 256:	84 b9       	out	0x04, r24	; 4
    char temp[36];               //carry out array For LCD 
	LCD_Init();                 //LCD Initialization
 258:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Init>
    ADC_conf();                //ADC Configuration
 25c:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_conf>
	// MAIN PROGRAM
    while (1) 
    {
		// SENSING TEMPERATURE USING ADC
		
		uint16_t adc_value = ADC_Read(channel);                               // Read the ADC value from the LM35 sensor
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_Read>
		unsigned char temperature = (adc_value * 5.0 / 1024.0) * 100.0;      //Voltage-Temperature Relation
 268:	bc 01       	movw	r22, r24
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__floatunsisf>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	40 ea       	ldi	r20, 0xA0	; 160
 278:	50 e4       	ldi	r21, 0x40	; 64
 27a:	0e 94 de 02 	call	0x5bc	; 0x5bc <__mulsf3>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e8       	ldi	r20, 0x80	; 128
 284:	5a e3       	ldi	r21, 0x3A	; 58
 286:	0e 94 de 02 	call	0x5bc	; 0x5bc <__mulsf3>
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	48 ec       	ldi	r20, 0xC8	; 200
 290:	52 e4       	ldi	r21, 0x42	; 66
 292:	0e 94 de 02 	call	0x5bc	; 0x5bc <__mulsf3>
 296:	0e 94 49 02 	call	0x492	; 0x492 <__fixunssfsi>
		
		//Condition if Temperature greater than or equal threshold(30) 
		if (temperature >= TEMP_THRESHOLD)
 29a:	e6 2e       	mov	r14, r22
 29c:	f1 2c       	mov	r15, r1
 29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a6:	e8 16       	cp	r14, r24
 2a8:	f9 06       	cpc	r15, r25
 2aa:	0c f4       	brge	.+2      	; 0x2ae <main+0xa6>
 2ac:	8b c0       	rjmp	.+278    	; 0x3c4 <main+0x1bc>
		{
			//configure AC
			PORTB |= (1<<PORTB0);     //Fan ON
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	81 60       	ori	r24, 0x01	; 1
 2b2:	85 b9       	out	0x05, r24	; 5
			                            
			//LCD PRINT CONFIGURATION
			
			sprintf(temp,"Temperature:%d",temperature);           //copying value into LCD
 2b4:	1f 92       	push	r1
 2b6:	6f 93       	push	r22
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	9f 93       	push	r25
 2be:	8f 93       	push	r24
 2c0:	8e 01       	movw	r16, r28
 2c2:	0f 5f       	subi	r16, 0xFF	; 255
 2c4:	1f 4f       	sbci	r17, 0xFF	; 255
 2c6:	1f 93       	push	r17
 2c8:	0f 93       	push	r16
 2ca:	0e 94 73 03 	call	0x6e6	; 0x6e6 <sprintf>
			LCD_gotoxy(0,0);                                      //1st character place
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_gotoxy>
	       write_string(temp); 
 2d6:	c8 01       	movw	r24, r16
 2d8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write_string>
		   sprintf(temp,"ON,THRESHOLD:%d   ",TEMP_THRESHOLD);           //copying value into LCD
 2dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e0:	8f 93       	push	r24
 2e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e6:	8f 93       	push	r24
 2e8:	81 e1       	ldi	r24, 0x11	; 17
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	9f 93       	push	r25
 2ee:	8f 93       	push	r24
 2f0:	1f 93       	push	r17
 2f2:	0f 93       	push	r16
 2f4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <sprintf>
		    LCD_gotoxy(0,1);                                      //1st character place
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_gotoxy>
		    write_string(temp);                                  //writing on display
 300:	c8 01       	movw	r24, r16
 302:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	37 e8       	ldi	r19, 0x87	; 135
 30a:	83 e1       	ldi	r24, 0x13	; 19
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	30 40       	sbci	r19, 0x00	; 0
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x104>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x10e>
 316:	00 00       	nop
			_delay_ms(400);                                       //delay before sensing timing condition
			
			
		 //condition to start timer to stop AC                
			if(temperature<TEMP_THRESHOLD)
 318:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 31c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	e8 16       	cp	r14, r24
 32c:	f9 06       	cpc	r15, r25
 32e:	0c f0       	brlt	.+2      	; 0x332 <main+0x12a>
 330:	97 cf       	rjmp	.-210    	; 0x260 <main+0x58>
		{	
			uint8_t timerOverflowCount;                              //overflow counter
			TCNT0=0;                                                // initialize counter to 0
 332:	16 bc       	out	0x26, r1	; 38
			TCCR0A &=~ ((1<<WGM00) | (1<<WGM01));                  //configure Normal mode of TIMER0
 334:	84 b5       	in	r24, 0x24	; 36
 336:	8c 7f       	andi	r24, 0xFC	; 252
 338:	84 bd       	out	0x24, r24	; 36
			TCCR0B &=~ (1<<WGM02);                                //configure Normal mode of TIMER0
 33a:	85 b5       	in	r24, 0x25	; 37
 33c:	87 7f       	andi	r24, 0xF7	; 247
 33e:	85 bd       	out	0x25, r24	; 37
			TCCR0B |= ((1<<CS00) | (1<<CS02)) ;                  //start timer at pre-scale 1024
 340:	85 b5       	in	r24, 0x25	; 37
 342:	85 60       	ori	r24, 0x05	; 5
 344:	85 bd       	out	0x25, r24	; 37
			while (!(TIFR0 & 1<<TOV0));                         //as long as TOV=0 >> do nth
 346:	a8 9b       	sbis	0x15, 0	; 21
 348:	fe cf       	rjmp	.-4      	; 0x346 <main+0x13e>
			TIFR0 |= (1<< TOV0) ;                              // 0x01; //clear overflow flag
 34a:	85 b3       	in	r24, 0x15	; 21
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	85 bb       	out	0x15, r24	; 21
			timerOverflowCount++;                             //INCREEMENT COUNTER each time an Overflow Occur
 350:	d3 94       	inc	r13
 352:	3f ef       	ldi	r19, 0xFF	; 255
 354:	83 ec       	ldi	r24, 0xC3	; 195
 356:	99 e0       	ldi	r25, 0x09	; 9
 358:	31 50       	subi	r19, 0x01	; 1
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	90 40       	sbci	r25, 0x00	; 0
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x150>
 360:	00 c0       	rjmp	.+0      	; 0x362 <main+0x15a>
 362:	00 00       	nop
			_delay_ms(200);                                   
			
			sprintf(temp,"OFF,THRESHOLD:%d   ",TEMP_THRESHOLD);                                //copying value into LCD
 364:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 368:	8f 93       	push	r24
 36a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 36e:	8f 93       	push	r24
 370:	84 e2       	ldi	r24, 0x24	; 36
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	9f 93       	push	r25
 376:	8f 93       	push	r24
 378:	8e 01       	movw	r16, r28
 37a:	0f 5f       	subi	r16, 0xFF	; 255
 37c:	1f 4f       	sbci	r17, 0xFF	; 255
 37e:	1f 93       	push	r17
 380:	0f 93       	push	r16
 382:	0e 94 73 03 	call	0x6e6	; 0x6e6 <sprintf>
			LCD_gotoxy(0,1);                                      //1st character place
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_gotoxy>
			write_string(temp);                                   //writing on display
 38e:	c8 01       	movw	r24, r16
 390:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write_string>
			  
			  
	//If timer reaches 25 counts which is equivalent to 10 sec
			if (timerOverflowCount>=25)
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	28 e1       	ldi	r18, 0x18	; 24
 3a2:	2d 15       	cp	r18, r13
 3a4:	08 f0       	brcs	.+2      	; 0x3a8 <main+0x1a0>
 3a6:	5c cf       	rjmp	.-328    	; 0x260 <main+0x58>
			{
				PORTB &= ~(1 << PORTB0);                           //turn AC OFF
 3a8:	85 b1       	in	r24, 0x05	; 5
 3aa:	8e 7f       	andi	r24, 0xFE	; 254
 3ac:	85 b9       	out	0x05, r24	; 5
 3ae:	3f ef       	ldi	r19, 0xFF	; 255
 3b0:	83 ec       	ldi	r24, 0xC3	; 195
 3b2:	99 e0       	ldi	r25, 0x09	; 9
 3b4:	31 50       	subi	r19, 0x01	; 1
 3b6:	80 40       	sbci	r24, 0x00	; 0
 3b8:	90 40       	sbci	r25, 0x00	; 0
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <main+0x1ac>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0x1b6>
 3be:	00 00       	nop
				_delay_ms(200);                                   //delay 
				timerOverflowCount=0;                            // clear the overflow counter
 3c0:	d1 2c       	mov	r13, r1
 3c2:	4e cf       	rjmp	.-356    	; 0x260 <main+0x58>
			
		}
		
		else
		{
			PORTB &=~ (1<<PORTB0);
 3c4:	85 b1       	in	r24, 0x05	; 5
 3c6:	8e 7f       	andi	r24, 0xFE	; 254
 3c8:	85 b9       	out	0x05, r24	; 5
			sprintf(temp,"Temperature:%d",temperature);           //copying value into temp
 3ca:	1f 92       	push	r1
 3cc:	6f 93       	push	r22
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	9f 93       	push	r25
 3d4:	8f 93       	push	r24
 3d6:	8e 01       	movw	r16, r28
 3d8:	0f 5f       	subi	r16, 0xFF	; 255
 3da:	1f 4f       	sbci	r17, 0xFF	; 255
 3dc:	1f 93       	push	r17
 3de:	0f 93       	push	r16
 3e0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <sprintf>
			LCD_gotoxy(0,0);                                     //1st character place
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_gotoxy>
			write_string(temp);                                 //writing on display
 3ec:	c8 01       	movw	r24, r16
 3ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write_string>
			
			sprintf(temp,"OFF,Threshold:%d   ",TEMP_THRESHOLD);                            //copying value into LCD
 3f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f6:	8f 93       	push	r24
 3f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3fc:	8f 93       	push	r24
 3fe:	88 e3       	ldi	r24, 0x38	; 56
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	9f 93       	push	r25
 404:	8f 93       	push	r24
 406:	1f 93       	push	r17
 408:	0f 93       	push	r16
 40a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <sprintf>
			LCD_gotoxy(0,1);                                  //1st character place
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_gotoxy>
			write_string(temp);                              //writing on display
 416:	c8 01       	movw	r24, r16
 418:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write_string>
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	1c cf       	rjmp	.-456    	; 0x260 <main+0x58>

00000428 <__vector_1>:
		}
		
	}
}
 ISR(INT0_vect){
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
	 PORTB ^=(1<<PORTB7);
 436:	85 b1       	in	r24, 0x05	; 5
 438:	80 58       	subi	r24, 0x80	; 128
 43a:	85 b9       	out	0x05, r24	; 5
	 TEMP_THRESHOLD++;
 43c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 440:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 44a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 }
 44e:	9f 91       	pop	r25
 450:	8f 91       	pop	r24
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <__vector_2>:
 ISR(INT1_vect){
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 PORTB ^=(1<<PORTB6);
 46a:	95 b1       	in	r25, 0x05	; 5
 46c:	80 e4       	ldi	r24, 0x40	; 64
 46e:	89 27       	eor	r24, r25
 470:	85 b9       	out	0x05, r24	; 5
 TEMP_THRESHOLD--;
 472:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 476:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 480:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 }
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__fixunssfsi>:
 492:	0e 94 bd 02 	call	0x57a	; 0x57a <__fp_splitA>
 496:	88 f0       	brcs	.+34     	; 0x4ba <__fixunssfsi+0x28>
 498:	9f 57       	subi	r25, 0x7F	; 127
 49a:	98 f0       	brcs	.+38     	; 0x4c2 <__fixunssfsi+0x30>
 49c:	b9 2f       	mov	r27, r25
 49e:	99 27       	eor	r25, r25
 4a0:	b7 51       	subi	r27, 0x17	; 23
 4a2:	b0 f0       	brcs	.+44     	; 0x4d0 <__fixunssfsi+0x3e>
 4a4:	e1 f0       	breq	.+56     	; 0x4de <__fixunssfsi+0x4c>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	1a f0       	brmi	.+6      	; 0x4b6 <__fixunssfsi+0x24>
 4b0:	ba 95       	dec	r27
 4b2:	c9 f7       	brne	.-14     	; 0x4a6 <__fixunssfsi+0x14>
 4b4:	14 c0       	rjmp	.+40     	; 0x4de <__fixunssfsi+0x4c>
 4b6:	b1 30       	cpi	r27, 0x01	; 1
 4b8:	91 f0       	breq	.+36     	; 0x4de <__fixunssfsi+0x4c>
 4ba:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__fp_zero>
 4be:	b1 e0       	ldi	r27, 0x01	; 1
 4c0:	08 95       	ret
 4c2:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_zero>
 4c6:	67 2f       	mov	r22, r23
 4c8:	78 2f       	mov	r23, r24
 4ca:	88 27       	eor	r24, r24
 4cc:	b8 5f       	subi	r27, 0xF8	; 248
 4ce:	39 f0       	breq	.+14     	; 0x4de <__fixunssfsi+0x4c>
 4d0:	b9 3f       	cpi	r27, 0xF9	; 249
 4d2:	cc f3       	brlt	.-14     	; 0x4c6 <__fixunssfsi+0x34>
 4d4:	86 95       	lsr	r24
 4d6:	77 95       	ror	r23
 4d8:	67 95       	ror	r22
 4da:	b3 95       	inc	r27
 4dc:	d9 f7       	brne	.-10     	; 0x4d4 <__fixunssfsi+0x42>
 4de:	3e f4       	brtc	.+14     	; 0x4ee <__fixunssfsi+0x5c>
 4e0:	90 95       	com	r25
 4e2:	80 95       	com	r24
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	08 95       	ret

000004f0 <__floatunsisf>:
 4f0:	e8 94       	clt
 4f2:	09 c0       	rjmp	.+18     	; 0x506 <__floatsisf+0x12>

000004f4 <__floatsisf>:
 4f4:	97 fb       	bst	r25, 7
 4f6:	3e f4       	brtc	.+14     	; 0x506 <__floatsisf+0x12>
 4f8:	90 95       	com	r25
 4fa:	80 95       	com	r24
 4fc:	70 95       	com	r23
 4fe:	61 95       	neg	r22
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	8f 4f       	sbci	r24, 0xFF	; 255
 504:	9f 4f       	sbci	r25, 0xFF	; 255
 506:	99 23       	and	r25, r25
 508:	a9 f0       	breq	.+42     	; 0x534 <__floatsisf+0x40>
 50a:	f9 2f       	mov	r31, r25
 50c:	96 e9       	ldi	r25, 0x96	; 150
 50e:	bb 27       	eor	r27, r27
 510:	93 95       	inc	r25
 512:	f6 95       	lsr	r31
 514:	87 95       	ror	r24
 516:	77 95       	ror	r23
 518:	67 95       	ror	r22
 51a:	b7 95       	ror	r27
 51c:	f1 11       	cpse	r31, r1
 51e:	f8 cf       	rjmp	.-16     	; 0x510 <__floatsisf+0x1c>
 520:	fa f4       	brpl	.+62     	; 0x560 <__floatsisf+0x6c>
 522:	bb 0f       	add	r27, r27
 524:	11 f4       	brne	.+4      	; 0x52a <__floatsisf+0x36>
 526:	60 ff       	sbrs	r22, 0
 528:	1b c0       	rjmp	.+54     	; 0x560 <__floatsisf+0x6c>
 52a:	6f 5f       	subi	r22, 0xFF	; 255
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	16 c0       	rjmp	.+44     	; 0x560 <__floatsisf+0x6c>
 534:	88 23       	and	r24, r24
 536:	11 f0       	breq	.+4      	; 0x53c <__floatsisf+0x48>
 538:	96 e9       	ldi	r25, 0x96	; 150
 53a:	11 c0       	rjmp	.+34     	; 0x55e <__floatsisf+0x6a>
 53c:	77 23       	and	r23, r23
 53e:	21 f0       	breq	.+8      	; 0x548 <__floatsisf+0x54>
 540:	9e e8       	ldi	r25, 0x8E	; 142
 542:	87 2f       	mov	r24, r23
 544:	76 2f       	mov	r23, r22
 546:	05 c0       	rjmp	.+10     	; 0x552 <__floatsisf+0x5e>
 548:	66 23       	and	r22, r22
 54a:	71 f0       	breq	.+28     	; 0x568 <__floatsisf+0x74>
 54c:	96 e8       	ldi	r25, 0x86	; 134
 54e:	86 2f       	mov	r24, r22
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	2a f0       	brmi	.+10     	; 0x560 <__floatsisf+0x6c>
 556:	9a 95       	dec	r25
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	da f7       	brpl	.-10     	; 0x556 <__floatsisf+0x62>
 560:	88 0f       	add	r24, r24
 562:	96 95       	lsr	r25
 564:	87 95       	ror	r24
 566:	97 f9       	bld	r25, 7
 568:	08 95       	ret

0000056a <__fp_split3>:
 56a:	57 fd       	sbrc	r21, 7
 56c:	90 58       	subi	r25, 0x80	; 128
 56e:	44 0f       	add	r20, r20
 570:	55 1f       	adc	r21, r21
 572:	59 f0       	breq	.+22     	; 0x58a <__fp_splitA+0x10>
 574:	5f 3f       	cpi	r21, 0xFF	; 255
 576:	71 f0       	breq	.+28     	; 0x594 <__fp_splitA+0x1a>
 578:	47 95       	ror	r20

0000057a <__fp_splitA>:
 57a:	88 0f       	add	r24, r24
 57c:	97 fb       	bst	r25, 7
 57e:	99 1f       	adc	r25, r25
 580:	61 f0       	breq	.+24     	; 0x59a <__fp_splitA+0x20>
 582:	9f 3f       	cpi	r25, 0xFF	; 255
 584:	79 f0       	breq	.+30     	; 0x5a4 <__fp_splitA+0x2a>
 586:	87 95       	ror	r24
 588:	08 95       	ret
 58a:	12 16       	cp	r1, r18
 58c:	13 06       	cpc	r1, r19
 58e:	14 06       	cpc	r1, r20
 590:	55 1f       	adc	r21, r21
 592:	f2 cf       	rjmp	.-28     	; 0x578 <__fp_split3+0xe>
 594:	46 95       	lsr	r20
 596:	f1 df       	rcall	.-30     	; 0x57a <__fp_splitA>
 598:	08 c0       	rjmp	.+16     	; 0x5aa <__fp_splitA+0x30>
 59a:	16 16       	cp	r1, r22
 59c:	17 06       	cpc	r1, r23
 59e:	18 06       	cpc	r1, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	f1 cf       	rjmp	.-30     	; 0x586 <__fp_splitA+0xc>
 5a4:	86 95       	lsr	r24
 5a6:	71 05       	cpc	r23, r1
 5a8:	61 05       	cpc	r22, r1
 5aa:	08 94       	sec
 5ac:	08 95       	ret

000005ae <__fp_zero>:
 5ae:	e8 94       	clt

000005b0 <__fp_szero>:
 5b0:	bb 27       	eor	r27, r27
 5b2:	66 27       	eor	r22, r22
 5b4:	77 27       	eor	r23, r23
 5b6:	cb 01       	movw	r24, r22
 5b8:	97 f9       	bld	r25, 7
 5ba:	08 95       	ret

000005bc <__mulsf3>:
 5bc:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__mulsf3x>
 5c0:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__fp_round>
 5c4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <__fp_pscA>
 5c8:	38 f0       	brcs	.+14     	; 0x5d8 <__mulsf3+0x1c>
 5ca:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscB>
 5ce:	20 f0       	brcs	.+8      	; 0x5d8 <__mulsf3+0x1c>
 5d0:	95 23       	and	r25, r21
 5d2:	11 f0       	breq	.+4      	; 0x5d8 <__mulsf3+0x1c>
 5d4:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_inf>
 5d8:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__fp_nan>
 5dc:	11 24       	eor	r1, r1
 5de:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_szero>

000005e2 <__mulsf3x>:
 5e2:	0e 94 b5 02 	call	0x56a	; 0x56a <__fp_split3>
 5e6:	70 f3       	brcs	.-36     	; 0x5c4 <__mulsf3+0x8>

000005e8 <__mulsf3_pse>:
 5e8:	95 9f       	mul	r25, r21
 5ea:	c1 f3       	breq	.-16     	; 0x5dc <__mulsf3+0x20>
 5ec:	95 0f       	add	r25, r21
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	55 1f       	adc	r21, r21
 5f2:	62 9f       	mul	r22, r18
 5f4:	f0 01       	movw	r30, r0
 5f6:	72 9f       	mul	r23, r18
 5f8:	bb 27       	eor	r27, r27
 5fa:	f0 0d       	add	r31, r0
 5fc:	b1 1d       	adc	r27, r1
 5fe:	63 9f       	mul	r22, r19
 600:	aa 27       	eor	r26, r26
 602:	f0 0d       	add	r31, r0
 604:	b1 1d       	adc	r27, r1
 606:	aa 1f       	adc	r26, r26
 608:	64 9f       	mul	r22, r20
 60a:	66 27       	eor	r22, r22
 60c:	b0 0d       	add	r27, r0
 60e:	a1 1d       	adc	r26, r1
 610:	66 1f       	adc	r22, r22
 612:	82 9f       	mul	r24, r18
 614:	22 27       	eor	r18, r18
 616:	b0 0d       	add	r27, r0
 618:	a1 1d       	adc	r26, r1
 61a:	62 1f       	adc	r22, r18
 61c:	73 9f       	mul	r23, r19
 61e:	b0 0d       	add	r27, r0
 620:	a1 1d       	adc	r26, r1
 622:	62 1f       	adc	r22, r18
 624:	83 9f       	mul	r24, r19
 626:	a0 0d       	add	r26, r0
 628:	61 1d       	adc	r22, r1
 62a:	22 1f       	adc	r18, r18
 62c:	74 9f       	mul	r23, r20
 62e:	33 27       	eor	r19, r19
 630:	a0 0d       	add	r26, r0
 632:	61 1d       	adc	r22, r1
 634:	23 1f       	adc	r18, r19
 636:	84 9f       	mul	r24, r20
 638:	60 0d       	add	r22, r0
 63a:	21 1d       	adc	r18, r1
 63c:	82 2f       	mov	r24, r18
 63e:	76 2f       	mov	r23, r22
 640:	6a 2f       	mov	r22, r26
 642:	11 24       	eor	r1, r1
 644:	9f 57       	subi	r25, 0x7F	; 127
 646:	50 40       	sbci	r21, 0x00	; 0
 648:	9a f0       	brmi	.+38     	; 0x670 <__mulsf3_pse+0x88>
 64a:	f1 f0       	breq	.+60     	; 0x688 <__mulsf3_pse+0xa0>
 64c:	88 23       	and	r24, r24
 64e:	4a f0       	brmi	.+18     	; 0x662 <__mulsf3_pse+0x7a>
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	bb 1f       	adc	r27, r27
 656:	66 1f       	adc	r22, r22
 658:	77 1f       	adc	r23, r23
 65a:	88 1f       	adc	r24, r24
 65c:	91 50       	subi	r25, 0x01	; 1
 65e:	50 40       	sbci	r21, 0x00	; 0
 660:	a9 f7       	brne	.-22     	; 0x64c <__mulsf3_pse+0x64>
 662:	9e 3f       	cpi	r25, 0xFE	; 254
 664:	51 05       	cpc	r21, r1
 666:	80 f0       	brcs	.+32     	; 0x688 <__mulsf3_pse+0xa0>
 668:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_inf>
 66c:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__fp_szero>
 670:	5f 3f       	cpi	r21, 0xFF	; 255
 672:	e4 f3       	brlt	.-8      	; 0x66c <__mulsf3_pse+0x84>
 674:	98 3e       	cpi	r25, 0xE8	; 232
 676:	d4 f3       	brlt	.-12     	; 0x66c <__mulsf3_pse+0x84>
 678:	86 95       	lsr	r24
 67a:	77 95       	ror	r23
 67c:	67 95       	ror	r22
 67e:	b7 95       	ror	r27
 680:	f7 95       	ror	r31
 682:	e7 95       	ror	r30
 684:	9f 5f       	subi	r25, 0xFF	; 255
 686:	c1 f7       	brne	.-16     	; 0x678 <__mulsf3_pse+0x90>
 688:	fe 2b       	or	r31, r30
 68a:	88 0f       	add	r24, r24
 68c:	91 1d       	adc	r25, r1
 68e:	96 95       	lsr	r25
 690:	87 95       	ror	r24
 692:	97 f9       	bld	r25, 7
 694:	08 95       	ret

00000696 <__fp_inf>:
 696:	97 f9       	bld	r25, 7
 698:	9f 67       	ori	r25, 0x7F	; 127
 69a:	80 e8       	ldi	r24, 0x80	; 128
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	08 95       	ret

000006a2 <__fp_nan>:
 6a2:	9f ef       	ldi	r25, 0xFF	; 255
 6a4:	80 ec       	ldi	r24, 0xC0	; 192
 6a6:	08 95       	ret

000006a8 <__fp_pscA>:
 6a8:	00 24       	eor	r0, r0
 6aa:	0a 94       	dec	r0
 6ac:	16 16       	cp	r1, r22
 6ae:	17 06       	cpc	r1, r23
 6b0:	18 06       	cpc	r1, r24
 6b2:	09 06       	cpc	r0, r25
 6b4:	08 95       	ret

000006b6 <__fp_pscB>:
 6b6:	00 24       	eor	r0, r0
 6b8:	0a 94       	dec	r0
 6ba:	12 16       	cp	r1, r18
 6bc:	13 06       	cpc	r1, r19
 6be:	14 06       	cpc	r1, r20
 6c0:	05 06       	cpc	r0, r21
 6c2:	08 95       	ret

000006c4 <__fp_round>:
 6c4:	09 2e       	mov	r0, r25
 6c6:	03 94       	inc	r0
 6c8:	00 0c       	add	r0, r0
 6ca:	11 f4       	brne	.+4      	; 0x6d0 <__fp_round+0xc>
 6cc:	88 23       	and	r24, r24
 6ce:	52 f0       	brmi	.+20     	; 0x6e4 <__fp_round+0x20>
 6d0:	bb 0f       	add	r27, r27
 6d2:	40 f4       	brcc	.+16     	; 0x6e4 <__fp_round+0x20>
 6d4:	bf 2b       	or	r27, r31
 6d6:	11 f4       	brne	.+4      	; 0x6dc <__fp_round+0x18>
 6d8:	60 ff       	sbrs	r22, 0
 6da:	04 c0       	rjmp	.+8      	; 0x6e4 <__fp_round+0x20>
 6dc:	6f 5f       	subi	r22, 0xFF	; 255
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	8f 4f       	sbci	r24, 0xFF	; 255
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	08 95       	ret

000006e6 <sprintf>:
 6e6:	ae e0       	ldi	r26, 0x0E	; 14
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e9 e7       	ldi	r30, 0x79	; 121
 6ec:	f3 e0       	ldi	r31, 0x03	; 3
 6ee:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__prologue_saves__+0x1c>
 6f2:	0d 89       	ldd	r16, Y+21	; 0x15
 6f4:	1e 89       	ldd	r17, Y+22	; 0x16
 6f6:	86 e0       	ldi	r24, 0x06	; 6
 6f8:	8c 83       	std	Y+4, r24	; 0x04
 6fa:	1a 83       	std	Y+2, r17	; 0x02
 6fc:	09 83       	std	Y+1, r16	; 0x01
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	9f e7       	ldi	r25, 0x7F	; 127
 702:	9e 83       	std	Y+6, r25	; 0x06
 704:	8d 83       	std	Y+5, r24	; 0x05
 706:	ae 01       	movw	r20, r28
 708:	47 5e       	subi	r20, 0xE7	; 231
 70a:	5f 4f       	sbci	r21, 0xFF	; 255
 70c:	6f 89       	ldd	r22, Y+23	; 0x17
 70e:	78 8d       	ldd	r23, Y+24	; 0x18
 710:	ce 01       	movw	r24, r28
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	0e 94 95 03 	call	0x72a	; 0x72a <vfprintf>
 718:	ef 81       	ldd	r30, Y+7	; 0x07
 71a:	f8 85       	ldd	r31, Y+8	; 0x08
 71c:	e0 0f       	add	r30, r16
 71e:	f1 1f       	adc	r31, r17
 720:	10 82       	st	Z, r1
 722:	2e 96       	adiw	r28, 0x0e	; 14
 724:	e4 e0       	ldi	r30, 0x04	; 4
 726:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__epilogue_restores__+0x1c>

0000072a <vfprintf>:
 72a:	ab e0       	ldi	r26, 0x0B	; 11
 72c:	b0 e0       	ldi	r27, 0x00	; 0
 72e:	eb e9       	ldi	r30, 0x9B	; 155
 730:	f3 e0       	ldi	r31, 0x03	; 3
 732:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__prologue_saves__>
 736:	6c 01       	movw	r12, r24
 738:	7b 01       	movw	r14, r22
 73a:	8a 01       	movw	r16, r20
 73c:	fc 01       	movw	r30, r24
 73e:	17 82       	std	Z+7, r1	; 0x07
 740:	16 82       	std	Z+6, r1	; 0x06
 742:	83 81       	ldd	r24, Z+3	; 0x03
 744:	81 ff       	sbrs	r24, 1
 746:	cc c1       	rjmp	.+920    	; 0xae0 <__stack+0x1e1>
 748:	ce 01       	movw	r24, r28
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	3c 01       	movw	r6, r24
 74e:	f6 01       	movw	r30, r12
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	f7 01       	movw	r30, r14
 754:	93 fd       	sbrc	r25, 3
 756:	85 91       	lpm	r24, Z+
 758:	93 ff       	sbrs	r25, 3
 75a:	81 91       	ld	r24, Z+
 75c:	7f 01       	movw	r14, r30
 75e:	88 23       	and	r24, r24
 760:	09 f4       	brne	.+2      	; 0x764 <vfprintf+0x3a>
 762:	ba c1       	rjmp	.+884    	; 0xad8 <__stack+0x1d9>
 764:	85 32       	cpi	r24, 0x25	; 37
 766:	39 f4       	brne	.+14     	; 0x776 <vfprintf+0x4c>
 768:	93 fd       	sbrc	r25, 3
 76a:	85 91       	lpm	r24, Z+
 76c:	93 ff       	sbrs	r25, 3
 76e:	81 91       	ld	r24, Z+
 770:	7f 01       	movw	r14, r30
 772:	85 32       	cpi	r24, 0x25	; 37
 774:	29 f4       	brne	.+10     	; 0x780 <vfprintf+0x56>
 776:	b6 01       	movw	r22, r12
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 77e:	e7 cf       	rjmp	.-50     	; 0x74e <vfprintf+0x24>
 780:	91 2c       	mov	r9, r1
 782:	21 2c       	mov	r2, r1
 784:	31 2c       	mov	r3, r1
 786:	ff e1       	ldi	r31, 0x1F	; 31
 788:	f3 15       	cp	r31, r3
 78a:	d8 f0       	brcs	.+54     	; 0x7c2 <vfprintf+0x98>
 78c:	8b 32       	cpi	r24, 0x2B	; 43
 78e:	79 f0       	breq	.+30     	; 0x7ae <vfprintf+0x84>
 790:	38 f4       	brcc	.+14     	; 0x7a0 <vfprintf+0x76>
 792:	80 32       	cpi	r24, 0x20	; 32
 794:	79 f0       	breq	.+30     	; 0x7b4 <vfprintf+0x8a>
 796:	83 32       	cpi	r24, 0x23	; 35
 798:	a1 f4       	brne	.+40     	; 0x7c2 <vfprintf+0x98>
 79a:	23 2d       	mov	r18, r3
 79c:	20 61       	ori	r18, 0x10	; 16
 79e:	1d c0       	rjmp	.+58     	; 0x7da <vfprintf+0xb0>
 7a0:	8d 32       	cpi	r24, 0x2D	; 45
 7a2:	61 f0       	breq	.+24     	; 0x7bc <vfprintf+0x92>
 7a4:	80 33       	cpi	r24, 0x30	; 48
 7a6:	69 f4       	brne	.+26     	; 0x7c2 <vfprintf+0x98>
 7a8:	23 2d       	mov	r18, r3
 7aa:	21 60       	ori	r18, 0x01	; 1
 7ac:	16 c0       	rjmp	.+44     	; 0x7da <vfprintf+0xb0>
 7ae:	83 2d       	mov	r24, r3
 7b0:	82 60       	ori	r24, 0x02	; 2
 7b2:	38 2e       	mov	r3, r24
 7b4:	e3 2d       	mov	r30, r3
 7b6:	e4 60       	ori	r30, 0x04	; 4
 7b8:	3e 2e       	mov	r3, r30
 7ba:	2a c0       	rjmp	.+84     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7bc:	f3 2d       	mov	r31, r3
 7be:	f8 60       	ori	r31, 0x08	; 8
 7c0:	1d c0       	rjmp	.+58     	; 0x7fc <vfprintf+0xd2>
 7c2:	37 fc       	sbrc	r3, 7
 7c4:	2d c0       	rjmp	.+90     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7c6:	20 ed       	ldi	r18, 0xD0	; 208
 7c8:	28 0f       	add	r18, r24
 7ca:	2a 30       	cpi	r18, 0x0A	; 10
 7cc:	40 f0       	brcs	.+16     	; 0x7de <vfprintf+0xb4>
 7ce:	8e 32       	cpi	r24, 0x2E	; 46
 7d0:	b9 f4       	brne	.+46     	; 0x800 <__DATA_REGION_LENGTH__>
 7d2:	36 fc       	sbrc	r3, 6
 7d4:	81 c1       	rjmp	.+770    	; 0xad8 <__stack+0x1d9>
 7d6:	23 2d       	mov	r18, r3
 7d8:	20 64       	ori	r18, 0x40	; 64
 7da:	32 2e       	mov	r3, r18
 7dc:	19 c0       	rjmp	.+50     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7de:	36 fe       	sbrs	r3, 6
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <vfprintf+0xc4>
 7e2:	8a e0       	ldi	r24, 0x0A	; 10
 7e4:	98 9e       	mul	r9, r24
 7e6:	20 0d       	add	r18, r0
 7e8:	11 24       	eor	r1, r1
 7ea:	92 2e       	mov	r9, r18
 7ec:	11 c0       	rjmp	.+34     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ee:	ea e0       	ldi	r30, 0x0A	; 10
 7f0:	2e 9e       	mul	r2, r30
 7f2:	20 0d       	add	r18, r0
 7f4:	11 24       	eor	r1, r1
 7f6:	22 2e       	mov	r2, r18
 7f8:	f3 2d       	mov	r31, r3
 7fa:	f0 62       	ori	r31, 0x20	; 32
 7fc:	3f 2e       	mov	r3, r31
 7fe:	08 c0       	rjmp	.+16     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 800:	8c 36       	cpi	r24, 0x6C	; 108
 802:	21 f4       	brne	.+8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 804:	83 2d       	mov	r24, r3
 806:	80 68       	ori	r24, 0x80	; 128
 808:	38 2e       	mov	r3, r24
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	88 36       	cpi	r24, 0x68	; 104
 80e:	41 f4       	brne	.+16     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 810:	f7 01       	movw	r30, r14
 812:	93 fd       	sbrc	r25, 3
 814:	85 91       	lpm	r24, Z+
 816:	93 ff       	sbrs	r25, 3
 818:	81 91       	ld	r24, Z+
 81a:	7f 01       	movw	r14, r30
 81c:	81 11       	cpse	r24, r1
 81e:	b3 cf       	rjmp	.-154    	; 0x786 <vfprintf+0x5c>
 820:	98 2f       	mov	r25, r24
 822:	9f 7d       	andi	r25, 0xDF	; 223
 824:	95 54       	subi	r25, 0x45	; 69
 826:	93 30       	cpi	r25, 0x03	; 3
 828:	28 f4       	brcc	.+10     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 82a:	0c 5f       	subi	r16, 0xFC	; 252
 82c:	1f 4f       	sbci	r17, 0xFF	; 255
 82e:	9f e3       	ldi	r25, 0x3F	; 63
 830:	99 83       	std	Y+1, r25	; 0x01
 832:	0d c0       	rjmp	.+26     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 834:	83 36       	cpi	r24, 0x63	; 99
 836:	31 f0       	breq	.+12     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 838:	83 37       	cpi	r24, 0x73	; 115
 83a:	71 f0       	breq	.+28     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 83c:	83 35       	cpi	r24, 0x53	; 83
 83e:	09 f0       	breq	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 840:	59 c0       	rjmp	.+178    	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 842:	21 c0       	rjmp	.+66     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 844:	f8 01       	movw	r30, r16
 846:	80 81       	ld	r24, Z
 848:	89 83       	std	Y+1, r24	; 0x01
 84a:	0e 5f       	subi	r16, 0xFE	; 254
 84c:	1f 4f       	sbci	r17, 0xFF	; 255
 84e:	88 24       	eor	r8, r8
 850:	83 94       	inc	r8
 852:	91 2c       	mov	r9, r1
 854:	53 01       	movw	r10, r6
 856:	13 c0       	rjmp	.+38     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 858:	28 01       	movw	r4, r16
 85a:	f2 e0       	ldi	r31, 0x02	; 2
 85c:	4f 0e       	add	r4, r31
 85e:	51 1c       	adc	r5, r1
 860:	f8 01       	movw	r30, r16
 862:	a0 80       	ld	r10, Z
 864:	b1 80       	ldd	r11, Z+1	; 0x01
 866:	36 fe       	sbrs	r3, 6
 868:	03 c0       	rjmp	.+6      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 86a:	69 2d       	mov	r22, r9
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 870:	6f ef       	ldi	r22, 0xFF	; 255
 872:	7f ef       	ldi	r23, 0xFF	; 255
 874:	c5 01       	movw	r24, r10
 876:	0e 94 81 05 	call	0xb02	; 0xb02 <strnlen>
 87a:	4c 01       	movw	r8, r24
 87c:	82 01       	movw	r16, r4
 87e:	f3 2d       	mov	r31, r3
 880:	ff 77       	andi	r31, 0x7F	; 127
 882:	3f 2e       	mov	r3, r31
 884:	16 c0       	rjmp	.+44     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 886:	28 01       	movw	r4, r16
 888:	22 e0       	ldi	r18, 0x02	; 2
 88a:	42 0e       	add	r4, r18
 88c:	51 1c       	adc	r5, r1
 88e:	f8 01       	movw	r30, r16
 890:	a0 80       	ld	r10, Z
 892:	b1 80       	ldd	r11, Z+1	; 0x01
 894:	36 fe       	sbrs	r3, 6
 896:	03 c0       	rjmp	.+6      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 898:	69 2d       	mov	r22, r9
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 89e:	6f ef       	ldi	r22, 0xFF	; 255
 8a0:	7f ef       	ldi	r23, 0xFF	; 255
 8a2:	c5 01       	movw	r24, r10
 8a4:	0e 94 76 05 	call	0xaec	; 0xaec <strnlen_P>
 8a8:	4c 01       	movw	r8, r24
 8aa:	f3 2d       	mov	r31, r3
 8ac:	f0 68       	ori	r31, 0x80	; 128
 8ae:	3f 2e       	mov	r3, r31
 8b0:	82 01       	movw	r16, r4
 8b2:	33 fc       	sbrc	r3, 3
 8b4:	1b c0       	rjmp	.+54     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8b6:	82 2d       	mov	r24, r2
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	88 16       	cp	r8, r24
 8bc:	99 06       	cpc	r9, r25
 8be:	b0 f4       	brcc	.+44     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
 8c0:	b6 01       	movw	r22, r12
 8c2:	80 e2       	ldi	r24, 0x20	; 32
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 8ca:	2a 94       	dec	r2
 8cc:	f4 cf       	rjmp	.-24     	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8ce:	f5 01       	movw	r30, r10
 8d0:	37 fc       	sbrc	r3, 7
 8d2:	85 91       	lpm	r24, Z+
 8d4:	37 fe       	sbrs	r3, 7
 8d6:	81 91       	ld	r24, Z+
 8d8:	5f 01       	movw	r10, r30
 8da:	b6 01       	movw	r22, r12
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 8e2:	21 10       	cpse	r2, r1
 8e4:	2a 94       	dec	r2
 8e6:	21 e0       	ldi	r18, 0x01	; 1
 8e8:	82 1a       	sub	r8, r18
 8ea:	91 08       	sbc	r9, r1
 8ec:	81 14       	cp	r8, r1
 8ee:	91 04       	cpc	r9, r1
 8f0:	71 f7       	brne	.-36     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8f2:	e8 c0       	rjmp	.+464    	; 0xac4 <__stack+0x1c5>
 8f4:	84 36       	cpi	r24, 0x64	; 100
 8f6:	11 f0       	breq	.+4      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8f8:	89 36       	cpi	r24, 0x69	; 105
 8fa:	41 f5       	brne	.+80     	; 0x94c <__stack+0x4d>
 8fc:	f8 01       	movw	r30, r16
 8fe:	37 fe       	sbrs	r3, 7
 900:	07 c0       	rjmp	.+14     	; 0x910 <__stack+0x11>
 902:	60 81       	ld	r22, Z
 904:	71 81       	ldd	r23, Z+1	; 0x01
 906:	82 81       	ldd	r24, Z+2	; 0x02
 908:	93 81       	ldd	r25, Z+3	; 0x03
 90a:	0c 5f       	subi	r16, 0xFC	; 252
 90c:	1f 4f       	sbci	r17, 0xFF	; 255
 90e:	08 c0       	rjmp	.+16     	; 0x920 <__stack+0x21>
 910:	60 81       	ld	r22, Z
 912:	71 81       	ldd	r23, Z+1	; 0x01
 914:	07 2e       	mov	r0, r23
 916:	00 0c       	add	r0, r0
 918:	88 0b       	sbc	r24, r24
 91a:	99 0b       	sbc	r25, r25
 91c:	0e 5f       	subi	r16, 0xFE	; 254
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	f3 2d       	mov	r31, r3
 922:	ff 76       	andi	r31, 0x6F	; 111
 924:	3f 2e       	mov	r3, r31
 926:	97 ff       	sbrs	r25, 7
 928:	09 c0       	rjmp	.+18     	; 0x93c <__stack+0x3d>
 92a:	90 95       	com	r25
 92c:	80 95       	com	r24
 92e:	70 95       	com	r23
 930:	61 95       	neg	r22
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	f0 68       	ori	r31, 0x80	; 128
 93a:	3f 2e       	mov	r3, r31
 93c:	2a e0       	ldi	r18, 0x0A	; 10
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	a3 01       	movw	r20, r6
 942:	0e 94 c8 05 	call	0xb90	; 0xb90 <__ultoa_invert>
 946:	88 2e       	mov	r8, r24
 948:	86 18       	sub	r8, r6
 94a:	45 c0       	rjmp	.+138    	; 0x9d6 <__stack+0xd7>
 94c:	85 37       	cpi	r24, 0x75	; 117
 94e:	31 f4       	brne	.+12     	; 0x95c <__stack+0x5d>
 950:	23 2d       	mov	r18, r3
 952:	2f 7e       	andi	r18, 0xEF	; 239
 954:	b2 2e       	mov	r11, r18
 956:	2a e0       	ldi	r18, 0x0A	; 10
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	25 c0       	rjmp	.+74     	; 0x9a6 <__stack+0xa7>
 95c:	93 2d       	mov	r25, r3
 95e:	99 7f       	andi	r25, 0xF9	; 249
 960:	b9 2e       	mov	r11, r25
 962:	8f 36       	cpi	r24, 0x6F	; 111
 964:	c1 f0       	breq	.+48     	; 0x996 <__stack+0x97>
 966:	18 f4       	brcc	.+6      	; 0x96e <__stack+0x6f>
 968:	88 35       	cpi	r24, 0x58	; 88
 96a:	79 f0       	breq	.+30     	; 0x98a <__stack+0x8b>
 96c:	b5 c0       	rjmp	.+362    	; 0xad8 <__stack+0x1d9>
 96e:	80 37       	cpi	r24, 0x70	; 112
 970:	19 f0       	breq	.+6      	; 0x978 <__stack+0x79>
 972:	88 37       	cpi	r24, 0x78	; 120
 974:	21 f0       	breq	.+8      	; 0x97e <__stack+0x7f>
 976:	b0 c0       	rjmp	.+352    	; 0xad8 <__stack+0x1d9>
 978:	e9 2f       	mov	r30, r25
 97a:	e0 61       	ori	r30, 0x10	; 16
 97c:	be 2e       	mov	r11, r30
 97e:	b4 fe       	sbrs	r11, 4
 980:	0d c0       	rjmp	.+26     	; 0x99c <__stack+0x9d>
 982:	fb 2d       	mov	r31, r11
 984:	f4 60       	ori	r31, 0x04	; 4
 986:	bf 2e       	mov	r11, r31
 988:	09 c0       	rjmp	.+18     	; 0x99c <__stack+0x9d>
 98a:	34 fe       	sbrs	r3, 4
 98c:	0a c0       	rjmp	.+20     	; 0x9a2 <__stack+0xa3>
 98e:	29 2f       	mov	r18, r25
 990:	26 60       	ori	r18, 0x06	; 6
 992:	b2 2e       	mov	r11, r18
 994:	06 c0       	rjmp	.+12     	; 0x9a2 <__stack+0xa3>
 996:	28 e0       	ldi	r18, 0x08	; 8
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	05 c0       	rjmp	.+10     	; 0x9a6 <__stack+0xa7>
 99c:	20 e1       	ldi	r18, 0x10	; 16
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0xa7>
 9a2:	20 e1       	ldi	r18, 0x10	; 16
 9a4:	32 e0       	ldi	r19, 0x02	; 2
 9a6:	f8 01       	movw	r30, r16
 9a8:	b7 fe       	sbrs	r11, 7
 9aa:	07 c0       	rjmp	.+14     	; 0x9ba <__stack+0xbb>
 9ac:	60 81       	ld	r22, Z
 9ae:	71 81       	ldd	r23, Z+1	; 0x01
 9b0:	82 81       	ldd	r24, Z+2	; 0x02
 9b2:	93 81       	ldd	r25, Z+3	; 0x03
 9b4:	0c 5f       	subi	r16, 0xFC	; 252
 9b6:	1f 4f       	sbci	r17, 0xFF	; 255
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__stack+0xc7>
 9ba:	60 81       	ld	r22, Z
 9bc:	71 81       	ldd	r23, Z+1	; 0x01
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 5f       	subi	r16, 0xFE	; 254
 9c4:	1f 4f       	sbci	r17, 0xFF	; 255
 9c6:	a3 01       	movw	r20, r6
 9c8:	0e 94 c8 05 	call	0xb90	; 0xb90 <__ultoa_invert>
 9cc:	88 2e       	mov	r8, r24
 9ce:	86 18       	sub	r8, r6
 9d0:	fb 2d       	mov	r31, r11
 9d2:	ff 77       	andi	r31, 0x7F	; 127
 9d4:	3f 2e       	mov	r3, r31
 9d6:	36 fe       	sbrs	r3, 6
 9d8:	0d c0       	rjmp	.+26     	; 0x9f4 <__stack+0xf5>
 9da:	23 2d       	mov	r18, r3
 9dc:	2e 7f       	andi	r18, 0xFE	; 254
 9de:	a2 2e       	mov	r10, r18
 9e0:	89 14       	cp	r8, r9
 9e2:	58 f4       	brcc	.+22     	; 0x9fa <__stack+0xfb>
 9e4:	34 fe       	sbrs	r3, 4
 9e6:	0b c0       	rjmp	.+22     	; 0x9fe <__stack+0xff>
 9e8:	32 fc       	sbrc	r3, 2
 9ea:	09 c0       	rjmp	.+18     	; 0x9fe <__stack+0xff>
 9ec:	83 2d       	mov	r24, r3
 9ee:	8e 7e       	andi	r24, 0xEE	; 238
 9f0:	a8 2e       	mov	r10, r24
 9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__stack+0xff>
 9f4:	b8 2c       	mov	r11, r8
 9f6:	a3 2c       	mov	r10, r3
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <__stack+0x101>
 9fa:	b8 2c       	mov	r11, r8
 9fc:	01 c0       	rjmp	.+2      	; 0xa00 <__stack+0x101>
 9fe:	b9 2c       	mov	r11, r9
 a00:	a4 fe       	sbrs	r10, 4
 a02:	0f c0       	rjmp	.+30     	; 0xa22 <__stack+0x123>
 a04:	fe 01       	movw	r30, r28
 a06:	e8 0d       	add	r30, r8
 a08:	f1 1d       	adc	r31, r1
 a0a:	80 81       	ld	r24, Z
 a0c:	80 33       	cpi	r24, 0x30	; 48
 a0e:	21 f4       	brne	.+8      	; 0xa18 <__stack+0x119>
 a10:	9a 2d       	mov	r25, r10
 a12:	99 7e       	andi	r25, 0xE9	; 233
 a14:	a9 2e       	mov	r10, r25
 a16:	09 c0       	rjmp	.+18     	; 0xa2a <__stack+0x12b>
 a18:	a2 fe       	sbrs	r10, 2
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <__stack+0x129>
 a1c:	b3 94       	inc	r11
 a1e:	b3 94       	inc	r11
 a20:	04 c0       	rjmp	.+8      	; 0xa2a <__stack+0x12b>
 a22:	8a 2d       	mov	r24, r10
 a24:	86 78       	andi	r24, 0x86	; 134
 a26:	09 f0       	breq	.+2      	; 0xa2a <__stack+0x12b>
 a28:	b3 94       	inc	r11
 a2a:	a3 fc       	sbrc	r10, 3
 a2c:	11 c0       	rjmp	.+34     	; 0xa50 <__stack+0x151>
 a2e:	a0 fe       	sbrs	r10, 0
 a30:	06 c0       	rjmp	.+12     	; 0xa3e <__stack+0x13f>
 a32:	b2 14       	cp	r11, r2
 a34:	88 f4       	brcc	.+34     	; 0xa58 <__stack+0x159>
 a36:	28 0c       	add	r2, r8
 a38:	92 2c       	mov	r9, r2
 a3a:	9b 18       	sub	r9, r11
 a3c:	0e c0       	rjmp	.+28     	; 0xa5a <__stack+0x15b>
 a3e:	b2 14       	cp	r11, r2
 a40:	60 f4       	brcc	.+24     	; 0xa5a <__stack+0x15b>
 a42:	b6 01       	movw	r22, r12
 a44:	80 e2       	ldi	r24, 0x20	; 32
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 a4c:	b3 94       	inc	r11
 a4e:	f7 cf       	rjmp	.-18     	; 0xa3e <__stack+0x13f>
 a50:	b2 14       	cp	r11, r2
 a52:	18 f4       	brcc	.+6      	; 0xa5a <__stack+0x15b>
 a54:	2b 18       	sub	r2, r11
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <__stack+0x15d>
 a58:	98 2c       	mov	r9, r8
 a5a:	21 2c       	mov	r2, r1
 a5c:	a4 fe       	sbrs	r10, 4
 a5e:	10 c0       	rjmp	.+32     	; 0xa80 <__stack+0x181>
 a60:	b6 01       	movw	r22, r12
 a62:	80 e3       	ldi	r24, 0x30	; 48
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 a6a:	a2 fe       	sbrs	r10, 2
 a6c:	17 c0       	rjmp	.+46     	; 0xa9c <__stack+0x19d>
 a6e:	a1 fc       	sbrc	r10, 1
 a70:	03 c0       	rjmp	.+6      	; 0xa78 <__stack+0x179>
 a72:	88 e7       	ldi	r24, 0x78	; 120
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <__stack+0x17d>
 a78:	88 e5       	ldi	r24, 0x58	; 88
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	b6 01       	movw	r22, r12
 a7e:	0c c0       	rjmp	.+24     	; 0xa98 <__stack+0x199>
 a80:	8a 2d       	mov	r24, r10
 a82:	86 78       	andi	r24, 0x86	; 134
 a84:	59 f0       	breq	.+22     	; 0xa9c <__stack+0x19d>
 a86:	a1 fe       	sbrs	r10, 1
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <__stack+0x18f>
 a8a:	8b e2       	ldi	r24, 0x2B	; 43
 a8c:	01 c0       	rjmp	.+2      	; 0xa90 <__stack+0x191>
 a8e:	80 e2       	ldi	r24, 0x20	; 32
 a90:	a7 fc       	sbrc	r10, 7
 a92:	8d e2       	ldi	r24, 0x2D	; 45
 a94:	b6 01       	movw	r22, r12
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 a9c:	89 14       	cp	r8, r9
 a9e:	38 f4       	brcc	.+14     	; 0xaae <__stack+0x1af>
 aa0:	b6 01       	movw	r22, r12
 aa2:	80 e3       	ldi	r24, 0x30	; 48
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 aaa:	9a 94       	dec	r9
 aac:	f7 cf       	rjmp	.-18     	; 0xa9c <__stack+0x19d>
 aae:	8a 94       	dec	r8
 ab0:	f3 01       	movw	r30, r6
 ab2:	e8 0d       	add	r30, r8
 ab4:	f1 1d       	adc	r31, r1
 ab6:	80 81       	ld	r24, Z
 ab8:	b6 01       	movw	r22, r12
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 ac0:	81 10       	cpse	r8, r1
 ac2:	f5 cf       	rjmp	.-22     	; 0xaae <__stack+0x1af>
 ac4:	22 20       	and	r2, r2
 ac6:	09 f4       	brne	.+2      	; 0xaca <__stack+0x1cb>
 ac8:	42 ce       	rjmp	.-892    	; 0x74e <vfprintf+0x24>
 aca:	b6 01       	movw	r22, r12
 acc:	80 e2       	ldi	r24, 0x20	; 32
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 94 8c 05 	call	0xb18	; 0xb18 <fputc>
 ad4:	2a 94       	dec	r2
 ad6:	f6 cf       	rjmp	.-20     	; 0xac4 <__stack+0x1c5>
 ad8:	f6 01       	movw	r30, r12
 ada:	86 81       	ldd	r24, Z+6	; 0x06
 adc:	97 81       	ldd	r25, Z+7	; 0x07
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <__stack+0x1e5>
 ae0:	8f ef       	ldi	r24, 0xFF	; 255
 ae2:	9f ef       	ldi	r25, 0xFF	; 255
 ae4:	2b 96       	adiw	r28, 0x0b	; 11
 ae6:	e2 e1       	ldi	r30, 0x12	; 18
 ae8:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__epilogue_restores__>

00000aec <strnlen_P>:
 aec:	fc 01       	movw	r30, r24
 aee:	05 90       	lpm	r0, Z+
 af0:	61 50       	subi	r22, 0x01	; 1
 af2:	70 40       	sbci	r23, 0x00	; 0
 af4:	01 10       	cpse	r0, r1
 af6:	d8 f7       	brcc	.-10     	; 0xaee <strnlen_P+0x2>
 af8:	80 95       	com	r24
 afa:	90 95       	com	r25
 afc:	8e 0f       	add	r24, r30
 afe:	9f 1f       	adc	r25, r31
 b00:	08 95       	ret

00000b02 <strnlen>:
 b02:	fc 01       	movw	r30, r24
 b04:	61 50       	subi	r22, 0x01	; 1
 b06:	70 40       	sbci	r23, 0x00	; 0
 b08:	01 90       	ld	r0, Z+
 b0a:	01 10       	cpse	r0, r1
 b0c:	d8 f7       	brcc	.-10     	; 0xb04 <strnlen+0x2>
 b0e:	80 95       	com	r24
 b10:	90 95       	com	r25
 b12:	8e 0f       	add	r24, r30
 b14:	9f 1f       	adc	r25, r31
 b16:	08 95       	ret

00000b18 <fputc>:
 b18:	0f 93       	push	r16
 b1a:	1f 93       	push	r17
 b1c:	cf 93       	push	r28
 b1e:	df 93       	push	r29
 b20:	fb 01       	movw	r30, r22
 b22:	23 81       	ldd	r18, Z+3	; 0x03
 b24:	21 fd       	sbrc	r18, 1
 b26:	03 c0       	rjmp	.+6      	; 0xb2e <fputc+0x16>
 b28:	8f ef       	ldi	r24, 0xFF	; 255
 b2a:	9f ef       	ldi	r25, 0xFF	; 255
 b2c:	2c c0       	rjmp	.+88     	; 0xb86 <fputc+0x6e>
 b2e:	22 ff       	sbrs	r18, 2
 b30:	16 c0       	rjmp	.+44     	; 0xb5e <fputc+0x46>
 b32:	46 81       	ldd	r20, Z+6	; 0x06
 b34:	57 81       	ldd	r21, Z+7	; 0x07
 b36:	24 81       	ldd	r18, Z+4	; 0x04
 b38:	35 81       	ldd	r19, Z+5	; 0x05
 b3a:	42 17       	cp	r20, r18
 b3c:	53 07       	cpc	r21, r19
 b3e:	44 f4       	brge	.+16     	; 0xb50 <fputc+0x38>
 b40:	a0 81       	ld	r26, Z
 b42:	b1 81       	ldd	r27, Z+1	; 0x01
 b44:	9d 01       	movw	r18, r26
 b46:	2f 5f       	subi	r18, 0xFF	; 255
 b48:	3f 4f       	sbci	r19, 0xFF	; 255
 b4a:	31 83       	std	Z+1, r19	; 0x01
 b4c:	20 83       	st	Z, r18
 b4e:	8c 93       	st	X, r24
 b50:	26 81       	ldd	r18, Z+6	; 0x06
 b52:	37 81       	ldd	r19, Z+7	; 0x07
 b54:	2f 5f       	subi	r18, 0xFF	; 255
 b56:	3f 4f       	sbci	r19, 0xFF	; 255
 b58:	37 83       	std	Z+7, r19	; 0x07
 b5a:	26 83       	std	Z+6, r18	; 0x06
 b5c:	14 c0       	rjmp	.+40     	; 0xb86 <fputc+0x6e>
 b5e:	8b 01       	movw	r16, r22
 b60:	ec 01       	movw	r28, r24
 b62:	fb 01       	movw	r30, r22
 b64:	00 84       	ldd	r0, Z+8	; 0x08
 b66:	f1 85       	ldd	r31, Z+9	; 0x09
 b68:	e0 2d       	mov	r30, r0
 b6a:	09 95       	icall
 b6c:	89 2b       	or	r24, r25
 b6e:	e1 f6       	brne	.-72     	; 0xb28 <fputc+0x10>
 b70:	d8 01       	movw	r26, r16
 b72:	16 96       	adiw	r26, 0x06	; 6
 b74:	8d 91       	ld	r24, X+
 b76:	9c 91       	ld	r25, X
 b78:	17 97       	sbiw	r26, 0x07	; 7
 b7a:	01 96       	adiw	r24, 0x01	; 1
 b7c:	17 96       	adiw	r26, 0x07	; 7
 b7e:	9c 93       	st	X, r25
 b80:	8e 93       	st	-X, r24
 b82:	16 97       	sbiw	r26, 0x06	; 6
 b84:	ce 01       	movw	r24, r28
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	1f 91       	pop	r17
 b8c:	0f 91       	pop	r16
 b8e:	08 95       	ret

00000b90 <__ultoa_invert>:
 b90:	fa 01       	movw	r30, r20
 b92:	aa 27       	eor	r26, r26
 b94:	28 30       	cpi	r18, 0x08	; 8
 b96:	51 f1       	breq	.+84     	; 0xbec <__ultoa_invert+0x5c>
 b98:	20 31       	cpi	r18, 0x10	; 16
 b9a:	81 f1       	breq	.+96     	; 0xbfc <__ultoa_invert+0x6c>
 b9c:	e8 94       	clt
 b9e:	6f 93       	push	r22
 ba0:	6e 7f       	andi	r22, 0xFE	; 254
 ba2:	6e 5f       	subi	r22, 0xFE	; 254
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	af 4f       	sbci	r26, 0xFF	; 255
 bac:	b1 e0       	ldi	r27, 0x01	; 1
 bae:	3e d0       	rcall	.+124    	; 0xc2c <__ultoa_invert+0x9c>
 bb0:	b4 e0       	ldi	r27, 0x04	; 4
 bb2:	3c d0       	rcall	.+120    	; 0xc2c <__ultoa_invert+0x9c>
 bb4:	67 0f       	add	r22, r23
 bb6:	78 1f       	adc	r23, r24
 bb8:	89 1f       	adc	r24, r25
 bba:	9a 1f       	adc	r25, r26
 bbc:	a1 1d       	adc	r26, r1
 bbe:	68 0f       	add	r22, r24
 bc0:	79 1f       	adc	r23, r25
 bc2:	8a 1f       	adc	r24, r26
 bc4:	91 1d       	adc	r25, r1
 bc6:	a1 1d       	adc	r26, r1
 bc8:	6a 0f       	add	r22, r26
 bca:	71 1d       	adc	r23, r1
 bcc:	81 1d       	adc	r24, r1
 bce:	91 1d       	adc	r25, r1
 bd0:	a1 1d       	adc	r26, r1
 bd2:	20 d0       	rcall	.+64     	; 0xc14 <__ultoa_invert+0x84>
 bd4:	09 f4       	brne	.+2      	; 0xbd8 <__ultoa_invert+0x48>
 bd6:	68 94       	set
 bd8:	3f 91       	pop	r19
 bda:	2a e0       	ldi	r18, 0x0A	; 10
 bdc:	26 9f       	mul	r18, r22
 bde:	11 24       	eor	r1, r1
 be0:	30 19       	sub	r19, r0
 be2:	30 5d       	subi	r19, 0xD0	; 208
 be4:	31 93       	st	Z+, r19
 be6:	de f6       	brtc	.-74     	; 0xb9e <__ultoa_invert+0xe>
 be8:	cf 01       	movw	r24, r30
 bea:	08 95       	ret
 bec:	46 2f       	mov	r20, r22
 bee:	47 70       	andi	r20, 0x07	; 7
 bf0:	40 5d       	subi	r20, 0xD0	; 208
 bf2:	41 93       	st	Z+, r20
 bf4:	b3 e0       	ldi	r27, 0x03	; 3
 bf6:	0f d0       	rcall	.+30     	; 0xc16 <__ultoa_invert+0x86>
 bf8:	c9 f7       	brne	.-14     	; 0xbec <__ultoa_invert+0x5c>
 bfa:	f6 cf       	rjmp	.-20     	; 0xbe8 <__ultoa_invert+0x58>
 bfc:	46 2f       	mov	r20, r22
 bfe:	4f 70       	andi	r20, 0x0F	; 15
 c00:	40 5d       	subi	r20, 0xD0	; 208
 c02:	4a 33       	cpi	r20, 0x3A	; 58
 c04:	18 f0       	brcs	.+6      	; 0xc0c <__ultoa_invert+0x7c>
 c06:	49 5d       	subi	r20, 0xD9	; 217
 c08:	31 fd       	sbrc	r19, 1
 c0a:	40 52       	subi	r20, 0x20	; 32
 c0c:	41 93       	st	Z+, r20
 c0e:	02 d0       	rcall	.+4      	; 0xc14 <__ultoa_invert+0x84>
 c10:	a9 f7       	brne	.-22     	; 0xbfc <__ultoa_invert+0x6c>
 c12:	ea cf       	rjmp	.-44     	; 0xbe8 <__ultoa_invert+0x58>
 c14:	b4 e0       	ldi	r27, 0x04	; 4
 c16:	a6 95       	lsr	r26
 c18:	97 95       	ror	r25
 c1a:	87 95       	ror	r24
 c1c:	77 95       	ror	r23
 c1e:	67 95       	ror	r22
 c20:	ba 95       	dec	r27
 c22:	c9 f7       	brne	.-14     	; 0xc16 <__ultoa_invert+0x86>
 c24:	00 97       	sbiw	r24, 0x00	; 0
 c26:	61 05       	cpc	r22, r1
 c28:	71 05       	cpc	r23, r1
 c2a:	08 95       	ret
 c2c:	9b 01       	movw	r18, r22
 c2e:	ac 01       	movw	r20, r24
 c30:	0a 2e       	mov	r0, r26
 c32:	06 94       	lsr	r0
 c34:	57 95       	ror	r21
 c36:	47 95       	ror	r20
 c38:	37 95       	ror	r19
 c3a:	27 95       	ror	r18
 c3c:	ba 95       	dec	r27
 c3e:	c9 f7       	brne	.-14     	; 0xc32 <__ultoa_invert+0xa2>
 c40:	62 0f       	add	r22, r18
 c42:	73 1f       	adc	r23, r19
 c44:	84 1f       	adc	r24, r20
 c46:	95 1f       	adc	r25, r21
 c48:	a0 1d       	adc	r26, r0
 c4a:	08 95       	ret

00000c4c <__prologue_saves__>:
 c4c:	2f 92       	push	r2
 c4e:	3f 92       	push	r3
 c50:	4f 92       	push	r4
 c52:	5f 92       	push	r5
 c54:	6f 92       	push	r6
 c56:	7f 92       	push	r7
 c58:	8f 92       	push	r8
 c5a:	9f 92       	push	r9
 c5c:	af 92       	push	r10
 c5e:	bf 92       	push	r11
 c60:	cf 92       	push	r12
 c62:	df 92       	push	r13
 c64:	ef 92       	push	r14
 c66:	ff 92       	push	r15
 c68:	0f 93       	push	r16
 c6a:	1f 93       	push	r17
 c6c:	cf 93       	push	r28
 c6e:	df 93       	push	r29
 c70:	cd b7       	in	r28, 0x3d	; 61
 c72:	de b7       	in	r29, 0x3e	; 62
 c74:	ca 1b       	sub	r28, r26
 c76:	db 0b       	sbc	r29, r27
 c78:	0f b6       	in	r0, 0x3f	; 63
 c7a:	f8 94       	cli
 c7c:	de bf       	out	0x3e, r29	; 62
 c7e:	0f be       	out	0x3f, r0	; 63
 c80:	cd bf       	out	0x3d, r28	; 61
 c82:	09 94       	ijmp

00000c84 <__epilogue_restores__>:
 c84:	2a 88       	ldd	r2, Y+18	; 0x12
 c86:	39 88       	ldd	r3, Y+17	; 0x11
 c88:	48 88       	ldd	r4, Y+16	; 0x10
 c8a:	5f 84       	ldd	r5, Y+15	; 0x0f
 c8c:	6e 84       	ldd	r6, Y+14	; 0x0e
 c8e:	7d 84       	ldd	r7, Y+13	; 0x0d
 c90:	8c 84       	ldd	r8, Y+12	; 0x0c
 c92:	9b 84       	ldd	r9, Y+11	; 0x0b
 c94:	aa 84       	ldd	r10, Y+10	; 0x0a
 c96:	b9 84       	ldd	r11, Y+9	; 0x09
 c98:	c8 84       	ldd	r12, Y+8	; 0x08
 c9a:	df 80       	ldd	r13, Y+7	; 0x07
 c9c:	ee 80       	ldd	r14, Y+6	; 0x06
 c9e:	fd 80       	ldd	r15, Y+5	; 0x05
 ca0:	0c 81       	ldd	r16, Y+4	; 0x04
 ca2:	1b 81       	ldd	r17, Y+3	; 0x03
 ca4:	aa 81       	ldd	r26, Y+2	; 0x02
 ca6:	b9 81       	ldd	r27, Y+1	; 0x01
 ca8:	ce 0f       	add	r28, r30
 caa:	d1 1d       	adc	r29, r1
 cac:	0f b6       	in	r0, 0x3f	; 63
 cae:	f8 94       	cli
 cb0:	de bf       	out	0x3e, r29	; 62
 cb2:	0f be       	out	0x3f, r0	; 63
 cb4:	cd bf       	out	0x3d, r28	; 61
 cb6:	ed 01       	movw	r28, r26
 cb8:	08 95       	ret

00000cba <_exit>:
 cba:	f8 94       	cli

00000cbc <__stop_program>:
 cbc:	ff cf       	rjmp	.-2      	; 0xcbc <__stop_program>
